using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MonotaArmStretc : MonoBehaviour
{
    public GameObject targetObject;  // ????I?u?W?F?N?g
    public GameObject trampoline;
    private Collider trampolineCollider; // ?g?????|??????R???C?_?[
    public float scaleSpeed = 2f;    // ?X?P?[????É÷????x
    private Vector3 originalScale;   // ????X?P?[??
    private bool isScaling = false;  // ?X?P?[???????????t???O
    private int StretchframeCount = 0;
    public int StretchFrames = 180;

    void Start()
    {
        if (targetObject != null)
        {
            // ???I?u?W?F?N?g?????X?P?[?????L?^
            originalScale = targetObject.transform.localScale;
        }

        if (trampoline != null)
        {
            // ?g?????|??????R???C?_?[???èÔ
            trampolineCollider = trampoline.GetComponent<Collider>();

            // ?g?????|??????R???C?_?[???????????????
            if (trampolineCollider != null)
            {
                trampolineCollider.enabled = false;
            }
        }
    }

    void Update()
    {
        if (targetObject == null) return;

        // ????`?F?b?N?i?L?[?{?[?hE?L?[ or Xbox?R???g???[???[?E?g???K?[?j
        if (Input.GetKey(KeyCode.E) || Input.GetAxis("MonotaRTrigger") > 0.1f)
        {
            isScaling = true;  // ?X?P?[???????????
            
        }
        else
        {
            isScaling = false; // ?X?P?[??????????
        }

        // ?X?P?[????X?V
        //UpdateScale();

        // ?g?????|??????R???C?_?[??L????/??????
        UpdateTrampolineCollider();
        StretchframeCount = 0;
    }

    void UpdateScale()
    {
        Vector3 currentScale = targetObject.transform.localScale;

        if (isScaling)
        {
            // X?X?P?[???????X??2?{???g??
            float targetXScale = originalScale.x * 10;
            currentScale.x = Mathf.MoveTowards(currentScale.x, targetXScale, scaleSpeed * Time.deltaTime);
        }
        else
        {
            // X?X?P?[???????X?????T?C?Y????
            currentScale.x = Mathf.MoveTowards(currentScale.x, originalScale.x, scaleSpeed * Time.deltaTime);
        }

        // ?X?P?[?????X?V
        targetObject.transform.localScale = currentScale;
    }

    void UpdateTrampolineCollider()
    {
        if (trampolineCollider == null) return;
        StretchframeCount++;
        // targetObject??originalScale????????R???C?_?[??L????
        trampolineCollider.enabled = true;

        if (StretchframeCount >= StretchFrames)
        {
            trampolineCollider.enabled = false;
        }
    }
}
